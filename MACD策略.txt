import talib as ta                                                      # 引入python技术分析模块talib
import numpy as np                                                      # 引入python数据分析模块numpy

start = '2019-06-01'                                                    # 回测起始时间
end = '2019-07-01'                                                      # 回测结束时间
capital_base = 1000000                                                  # 回测账户资金
bench_mark = '000300.SSE'                                               # 回测基准指标
freq = 'd'                                                              # 策略类型，'d'表示日间策略使用日线回测，'m'表示日内策略使用分钟线回测
securities = static_securities_pool('1012001002004.*')                  # 上证50成分股

# 回测初始化函数，该函数会在正式回测进行之前调用一次
def initialize(context):
    # 回测参数设置
    set_commission(PerValue(cost=0.0003))                               # 设置策略手续费模型，示例为根据成交金额收取万飞之三的费用
    slippage_model = VolumeShareSlippage(0.5,0.1)                       # 构造策略滑点模型，示例为成交比例模式，限制成交比例为0.5，价格影响因子为0.1
    set_slippage(equities = slippage_model)                             # 设置策略滑点模型
    set_cancel_policy(EODCancel())                                      # 设置自动撤单策略，示例为未结订单每日盘后自动撤销

    # 用户变量设置
    context.my_asset = None                                    # 设置目标证券，可用在handle_data函数中使用
    context.code_pool= None
    context.hold_securities=set()

# 策略运行逻辑函数，每个单位时间(如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次)调用一次
def handle_data(context,data):
    try:
        if context.code_pool==None:context.code_pool=data.get_securities()
        for code in context.code_pool:
            context.my_asset=code.symbol

            position = get_position(context.my_asset)                           # 获取目标证券持仓
            volume = 0 if position == None else position['volume']              # 获取目标证券持仓
            cp = np.array(data.history(context.my_asset,['close'],50,'d')['close'])       # 获取目标证券历史收盘价信息，用于计算策略信号
            DIF,DEA,BAR=ta.MACD(cp,12,26,9) 
            can_trade = data.can_trade(context.my_asset)                        # 判断标的是否可以进行交易
            # DIFF和DEA均为正值，DIFF线向上突破DEA线
            condition_buy_1=DIF[-1]>0 and DEA[-1]>0 and DIF[-2]<DEA[-2] and DIF[-1]>DEA[-1] and volume==0 and can_trade
            # DIFF和DEA均为负值，DIFF线向上突破DEA线
            condition_buy_2=DIF[-1]<0 and DEA[-1]<0 and DIF[-2]<DEA[-2] and DIF[-1]>DEA[-1] and volume==0 and can_trade
            # DIFF和DEA均为负值，DIFF线向下跌破DEA线
            condition_sell_1=DIF[-1]<0 and DEA[-1]<0 and DIF[-2]>DEA[-2] and DIF[-1]<DEA[-1] and volume!=0 and can_trade
            # DIFF和DEA均为正值，DIFF线向下跌破DEA线
            condition_sell_2=DIF[-1]>0 and DEA[-1]>0 and DIF[-2]>DEA[-2] and DIF[-1]<DEA[-1] and volume!=0 and can_trade

            if condition_buy_1 or condition_buy_2:
                context.hold_securities.add(context.my_asset)
            elif condition_sell_1 or condition_sell_2:
                context.hold_securities.remove(context.my_asset)
                order_target_percent(context.my_asset,0,0)

        weight=0 if len(context.hold_securities)==0 else 1/len(context.hold_securities)
        for code in context.hold_securities:
            order_target_percent(code,weight,0)
    except Exception as e:
        print(e)